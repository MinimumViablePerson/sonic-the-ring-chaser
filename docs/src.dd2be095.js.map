{"version":3,"sources":["src/core/Canvas.js","src/helpers.js","src/core/Engine.js","src/core/SoundBank.js","src/objects/SonicSoundBank.js","src/core/Scene.js","src/core/Sprite.js","src/objects/Player.js","src/core/Text.js","src/objects/ScoreText.js","src/objects/StartingText.js","src/objects/GameOverText.js","src/objects/SpeedText.js","src/core/Cursor.js","src/objects/SonicCursor.js","src/core/BG.js","src/objects/GameBG.js","src/objects/Coin.js","src/objects/Tails.js","src/core/Rectangle.js","src/objects/TopBar.js","src/scenes/GameScene.js","src/objects/TitleScreen.js","src/scenes/TitleScene.js","src/index.js"],"names":["Canvas","target","options","element","document","createElement","append","Object","entries","key","value","ctx","getContext","canvas","freeze","randomRange","min","max","Math","round","random","rectCollision","a","b","x","width","y","height","outOfBounds","canvasElement","object","padding","pickRandom","array","floor","length","deepClone","data","JSON","parse","stringify","Engine","soundBank","scenes","initialScene","undefined","Error","paused","scene","pause","pauseAll","play","resume","resumeAll","render","requestAnimationFrame","clearRect","objects","forEach","setScene","sceneName","onExit","engine","state","makeObjects","effects","onEnter","player","find","isPlayer","start","getObjects","removeObject","filter","addObject","getPlayer","getState","setState","newState","runEffect","effectName","args","togglePause","isRunning","SoundBank","basePath","soundSources","soundName","filePath","fetch","then","resp","blob","audioSrc","window","URL","createObjectURL","createSoundSourceUrls","playing","sound","loop","volume","audio","Audio","onended","clearPlaylist","SonicSoundBank","bg","gameOver","rings","jump","tailsHereICome","tailsNoSee","tailsScream","tailsSonicHappy","tailsSonicUpset","tailsSorry","tailsSupercharge","tailsUhOh","tailsWakeUp","tailsWhereSonic","tailsYeah","tailsYeah2","Scene","map","Sprite","initialX","initialY","spritesheet","frameRate","sections","idle","xOffset","yOffset","spriteWidth","spriteHeight","defaultSection","currentFrameNumber","framesPlayed","image","Image","src","currentSection","values","getCurrentFrame","sprite","currentFrame","drawImage","draw","section","newFrameRate","getCurrentSection","Player","getInitialState","sidePadding","floorHeight","smashing","smashPower","speed","gravity","friction","jumping","jumps","maxJumps","jumpPower","velocity","runningRight","runningLeft","walkingRight","idleLeft","walkingLeft","falling","addEventListener","slowDownBy","amount","speedUpBy","reset","InitialState","Text","content","color","fontStyle","centered","background","properties","text","update","newProperties","font","textBaseline","textDimensions","measureText","centeredWidth","fillStyle","fillRect","actualBoundingBoxDescent","fillText","ScoreText","scoreText","score","StartingText","setTimeout","startingText","GameOverText","restartText","gameOverText","gameIsOver","SpeedText","Cursor","source","e","getBoundingClientRect","top","left","cursor","SonicCursor","BG","GameBG","require","default","Coin","checkIfCollided","playerState","coin","Tails","direction","ceil","tails","Rectangle","rectangle","newProps","TopBar","GameScene","startGame","coinHandle","tailsHandle","clearInterval","spawnCoin","setInterval","includes","secondsPerCoin","spawnTails","secondsPerTails","startListeningForPause","startListeningForRestart","StartScreen","TitleScene","TitleScreen","startListeningForGameStart","listener","removeEventListener","body","title","game"],"mappings":"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a,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,EACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,EACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,EACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,EACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,GACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,EACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,GACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,EACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,GACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAAa,GACbC,aAAc,IAEhB,CACEH,QAAS,IACTC,QAAS,IACTC,YAA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","file":"src.dd2be095.js","sourceRoot":"..","sourcesContent":["function Canvas({ target, ...options }) {\n  let element = document.createElement('canvas')\n  target.append(element)\n\n  for (const [key, value] of Object.entries(options)) {\n    element[key] = value\n  }\n\n  let ctx = element.getContext('2d')\n\n  const canvas = { element, ctx }\n\n  return Object.freeze(canvas)\n}\n\nexport default Canvas\n","export const randomRange = (min, max) =>\n  Math.round(min + Math.random() * (max - min))\n\nexport const rectCollision = (a, b) =>\n  a.x < b.x + b.width &&\n  a.x + a.width > b.x &&\n  a.y < b.y + b.height &&\n  a.y + a.height > b.y\n\nexport const outOfBounds = (canvasElement, object, padding = 0) =>\n  object.x - padding > canvasElement.width ||\n  object.x + padding < 0 ||\n  object.y - padding > canvasElement.height ||\n  object.y + padding < 0\n\nexport const pickRandom = array =>\n  array[Math.floor(Math.random() * array.length)]\n\nexport const deepClone = data => JSON.parse(JSON.stringify(data))\n","import { deepClone } from '../helpers'\n\nfunction Engine({ canvas, soundBank, scenes, initialScene }) {\n  if (initialScene === undefined) throw Error('Please select an initial scene.')\n  let paused = false\n  let scene = null\n\n  let togglePause = () => {\n    if (paused) resume()\n    else pause()\n  }\n\n  let pause = () => {\n    soundBank.pauseAll()\n    soundBank.play('freeze')\n    paused = true\n  }\n\n  let resume = () => {\n    soundBank.resumeAll()\n    paused = false\n    render()\n  }\n\n  let render = () => {\n    if (paused) return\n    requestAnimationFrame(render)\n    const { width, height } = canvas.element\n    canvas.ctx.clearRect(0, 0, width, height)\n    scene.objects.forEach(object => object.render())\n  }\n\n  let start = () => {\n    render()\n  }\n\n  let addObject = object => {\n    scene.objects = [...scene.objects, object]\n  }\n\n  let removeObject = target => {\n    scene.objects = scene.objects.filter(object => object !== target)\n  }\n\n  let runEffect = (effectName, ...args) => {\n    scene.effects[effectName](engine, ...args)\n  }\n\n  let setScene = sceneName => {\n    if (scene !== null) scene.onExit(engine)\n\n    const { state, makeObjects, effects, onEnter, onExit } = scenes[sceneName]\n\n    scene = {\n      state: deepClone(state),\n      objects: makeObjects(engine),\n      effects,\n      onExit\n    }\n\n    scene.player = scene.objects.find(object => object.isPlayer)\n\n    onEnter(engine)\n  }\n\n  let setState = newState => {\n    scene.state = { ...scene.state, ...newState }\n  }\n\n  let isRunning = () => !paused\n\n  let engine = {\n    start,\n    canvas,\n    soundBank,\n    getObjects: () => scene.objects,\n    removeObject,\n    addObject,\n    getPlayer: () => scene.player,\n    getState: () => scene.state,\n    setState,\n    runEffect,\n    setScene,\n    togglePause,\n    isRunning\n  }\n\n  setScene(initialScene)\n\n  return Object.freeze(engine)\n}\n\nexport default Engine\n","function SoundBank({ basePath, ...soundSources }) {\n  let createSoundSourceUrls = () => {\n    for (const soundName in soundSources) {\n      const filePath = soundSources[soundName]\n      fetch(`${basePath}/${filePath}`)\n        .then(resp => resp.blob())\n        .then(blob => {\n          const audioSrc = window.URL.createObjectURL(blob)\n          soundSources[soundName] = audioSrc\n        })\n    }\n  }\n\n  let play = ({ sound = '', loop = false, volume = 1 }) => {\n    const audio = new Audio(soundSources[sound])\n    audio.play()\n    audio.loop = loop\n    audio.volume = volume\n\n    playing = [audio, ...playing]\n    audio.onended = () => {\n      if (audio.loop) return\n      playing = playing.filter(target => target !== audio)\n    }\n  }\n\n  let clearPlaylist = () => {\n    playing = []\n  }\n\n  let pauseAll = () => {\n    playing.forEach(audio => audio.pause())\n  }\n\n  let resumeAll = () => {\n    playing.forEach(audio => audio.play())\n  }\n\n  createSoundSourceUrls()\n  let playing = []\n\n  const soundBank = {\n    play,\n    resumeAll,\n    pauseAll,\n    clearPlaylist\n  }\n\n  return Object.freeze(soundBank)\n}\n\nexport default SoundBank\n","import SoundBank from '../core/SoundBank'\n\nconst SonicSoundBank = SoundBank({\n  basePath: '/src/assets/sounds',\n  bg: 'bg-music.mp3',\n  gameOver: 'ending.mp3',\n  rings: 'rings.mp3',\n  jump: 'jump.mp3',\n  freeze: 'freeze.mp3',\n  tailsHereICome: 'tails-here-i-come.mp3',\n  tailsNoSee: 'tails-no-see.mp3',\n  tailsScream: 'tails-scream.mp3',\n  tailsSonicHappy: 'tails-sonic-happy.mp3',\n  tailsSonicUpset: 'tails-sonic-upset.mp3',\n  tailsSorry: 'tails-sorry.mp3',\n  tailsSupercharge: 'tails-supercharge.mp3',\n  tailsUhOh: 'tails-uh-oh.mp3',\n  tailsWakeUp: 'tails-wake-up.mp3',\n  tailsWhereSonic: 'tails-where-sonic.mp3',\n  tailsYeah: 'tails-yeah.mp3',\n  tailsYeah2: 'tails-yeah-2.mp3'\n})\n\nexport default SonicSoundBank\n","function Scene({\n  objects = [],\n  effects = [],\n  state = {},\n  onEnter = engine => {},\n  onExit = engine => {}\n}) {\n  const scene = {\n    makeObjects: engine => objects.map(object => object({ engine })),\n    effects,\n    state,\n    onEnter,\n    onExit\n  }\n  return Object.freeze(scene)\n}\n\nexport default Scene\n","function Sprite({\n  engine,\n  initialX = 0,\n  initialY = 0,\n  spritesheet,\n  width = 40,\n  height = 50,\n  frameRate = 10,\n  sections = {\n    idle: [\n      {\n        xOffset: 0,\n        yOffset: 0,\n        spriteWidth: 100,\n        spriteHeight: 100\n      }\n    ]\n  },\n  defaultSection = 'idle'\n}) {\n  let canvas = engine.canvas\n  let currentFrameNumber = 0\n  let framesPlayed = 0\n\n  let image = new Image()\n  image.src = `/src/assets/sprites/${spritesheet}.png`\n\n  let currentSection = sections[defaultSection] || Object.values(sections)[0]\n\n  const getCurrentSection = () => currentSection\n\n  const getCurrentFrame = () => currentSection[currentFrameNumber]\n\n  let draw = ({ x, y } = {}) => {\n    const currentFrame = getCurrentFrame()\n\n    if (currentFrame === undefined)\n      throw Error(\n        'No frame selected. Make sure you have at least one section with at least one frame in it.'\n      )\n    canvas.ctx.drawImage(\n      image,\n      currentFrame.xOffset,\n      currentFrame.yOffset,\n      currentFrame.spriteWidth,\n      currentFrame.spriteHeight,\n      x,\n      y,\n      width,\n      height\n    )\n  }\n\n  let nextFrame = () => {\n    framesPlayed++\n    currentFrameNumber =\n      Math.floor(framesPlayed / frameRate) % currentSection.length\n  }\n\n  let play = (section, newFrameRate = 5) => {\n    if (sections[section] === undefined) return\n    if (sections[section] === currentSection) return\n\n    frameRate = newFrameRate\n    currentFrameNumber = 0\n    currentSection = sections[section]\n  }\n\n  let render = ({ x = initialX, y = initialY } = {}) => {\n    draw({ x, y })\n    nextFrame()\n  }\n\n  const sprite = {\n    render,\n    play,\n    sections,\n    getCurrentFrame,\n    getCurrentSection\n  }\n\n  return Object.freeze(sprite)\n}\n\nexport default Sprite\n","import Sprite from '../core/Sprite'\n\nconst getInitialState = engine => ({\n  sidePadding: 0,\n  x: 0,\n  y: 0,\n  width: 30,\n  height: 40,\n  canvas: engine.canvas,\n  floorHeight: engine.canvas.element.height - 45,\n  smashing: false,\n  smashPower: 10,\n  speed: 5,\n  gravity: 0.5,\n  friction: 0.5,\n  jumping: false,\n  jumps: 0,\n  maxJumps: 3,\n  jumpPower: 11,\n  velocity: {\n    x: 0,\n    y: 0\n  },\n  runningRight: false,\n  runningLeft: false\n})\n\nfunction Player({ engine }) {\n  let state = getInitialState(engine)\n\n  let sprite = Sprite({\n    engine,\n    x: state.x,\n    y: state.y,\n    spritesheet: 'sonic',\n    width: state.width,\n    height: state.height,\n    frameRate: 10,\n    sections: {\n      walkingRight: [\n        {\n          xOffset: 425,\n          yOffset: 73,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 470,\n          yOffset: 73,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 515,\n          yOffset: 73,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 560,\n          yOffset: 73,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 615,\n          yOffset: 73,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 665,\n          yOffset: 73,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 10,\n          yOffset: 138,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 55,\n          yOffset: 138,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 100,\n          yOffset: 138,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 145,\n          yOffset: 138,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 190,\n          yOffset: 138,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 245,\n          yOffset: 138,\n          spriteWidth: 32,\n          spriteHeight: 43\n        }\n      ],\n      idle: [\n        {\n          xOffset: 15,\n          yOffset: 10,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 60,\n          yOffset: 10,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 105,\n          yOffset: 10,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 150,\n          yOffset: 10,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 195,\n          yOffset: 10,\n          spriteWidth: 32,\n          spriteHeight: 43\n        }\n      ],\n      idleLeft: [\n        {\n          xOffset: 688 - 45 * 0,\n          yOffset: 582,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 688 - 45 * 1,\n          yOffset: 582,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 688 - 45 * 2,\n          yOffset: 582,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 688 - 45 * 3,\n          yOffset: 582,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 688 - 45 * 4,\n          yOffset: 582,\n          spriteWidth: 32,\n          spriteHeight: 43\n        }\n      ],\n      walkingLeft: [\n        {\n          xOffset: 275,\n          yOffset: 646,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 230,\n          yOffset: 646,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 185,\n          yOffset: 646,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 140,\n          yOffset: 646,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 85,\n          yOffset: 646,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 35,\n          yOffset: 646,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 688,\n          yOffset: 711,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 643,\n          yOffset: 711,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 598,\n          yOffset: 711,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 553,\n          yOffset: 711,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 508,\n          yOffset: 711,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 453,\n          yOffset: 711,\n          spriteWidth: 32,\n          spriteHeight: 43\n        }\n      ],\n      jumping: [\n        {\n          xOffset: 10,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 50,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 85,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 130,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 175,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 210,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 250,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n\n        {\n          xOffset: 290,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 330,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 370,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        }\n      ],\n      falling: [\n        {\n          xOffset: 425,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 480,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        },\n        {\n          xOffset: 535,\n          yOffset: 523,\n          spriteWidth: 32,\n          spriteHeight: 43\n        }\n      ]\n    },\n    defaultSection: 'falling'\n  })\n\n  const startMove = ({ key }) => {\n    switch (key) {\n      case ' ':\n      case 'ArrowUp':\n        state.jumping = true\n        break\n      case 'ArrowLeft':\n        state.runningLeft = true\n        break\n      case 'ArrowRight':\n        state.runningRight = true\n        break\n      case 'ArrowDown':\n        state.smashing = true\n        break\n      default:\n        return\n    }\n  }\n\n  const stopMove = ({ key }) => {\n    switch (key) {\n      case 'ArrowLeft':\n        state.runningLeft = false\n        break\n      case 'ArrowRight':\n        state.runningRight = false\n        break\n      default:\n        return\n    }\n  }\n\n  const applyGravity = () => {\n    if (state.y > state.floorHeight - state.height) {\n      state.y = state.floorHeight - state.height\n      state.velocity.y = 0\n      state.jumps = 0\n      state.smashing = false\n    } else {\n      state.velocity.y += state.gravity\n    }\n  }\n\n  const applyFriction = () => {\n    if (state.velocity.x > 1) {\n      state.velocity.x -= state.friction\n    } else if (state.velocity.x < -1) {\n      state.velocity.x += state.friction\n    } else {\n      state.velocity.x = 0\n    }\n  }\n\n  const updateVelocity = () => {\n    if (state.runningLeft) {\n      state.velocity.x = -state.speed\n    }\n\n    if (state.runningRight) {\n      state.velocity.x = state.speed\n    }\n\n    if (\n      state.x >\n      state.canvas.element.width - state.width - state.sidePadding\n    ) {\n      state.x = state.canvas.element.width - state.width - state.sidePadding\n      state.velocity.x = 0\n      state.runningRight = false\n    }\n\n    if (state.x < state.sidePadding) {\n      state.x = state.sidePadding\n      state.velocity.x = 0\n      state.runningLeft = false\n    }\n\n    if (state.jumping) {\n      state.jumping = false\n      state.jumps++\n      if (state.jumps <= state.maxJumps) {\n        engine.soundBank.play({ sound: 'jump', volume: 0.4 })\n        state.velocity.y = -state.jumpPower\n      }\n    }\n\n    if (state.smashing) {\n      state.velocity.y += state.smashPower\n    }\n  }\n\n  const applyVelocity = () => {\n    state.y += state.velocity.y\n    state.x += state.velocity.x\n  }\n\n  const updateAnimation = () => {\n    if (state.velocity.y <= -1) {\n      sprite.play('jumping', 5)\n      return\n    }\n\n    if (state.velocity.y >= 1) {\n      sprite.play('falling', 5)\n      return\n    }\n\n    if (state.velocity.x > 0) {\n      sprite.play('walkingRight', 12 / state.speed)\n      return\n    }\n\n    if (state.velocity.x < 0) {\n      sprite.play('walkingLeft', 12 / state.speed)\n      return\n    }\n\n    if (state.velocity.x === 0) {\n      if (\n        sprite.getCurrentSection() === sprite.sections.walkingLeft ||\n        sprite.getCurrentSection() === sprite.sections.idleLeft\n      ) {\n        sprite.play('idleLeft', 10)\n      } else {\n        sprite.play('idle', 10)\n      }\n      return\n    }\n  }\n\n  const slowDownBy = amount => {\n    state.speed -= amount\n  }\n\n  const speedUpBy = amount => {\n    state.speed += amount\n  }\n\n  const draw = () => {\n    sprite.render({ x: state.x, y: state.y })\n  }\n\n  const reset = () => {\n    state = InitialState(engine)\n  }\n\n  const render = () => {\n    updateVelocity()\n    applyVelocity()\n    applyGravity()\n    updateAnimation()\n    applyFriction()\n    draw()\n  }\n\n  window.addEventListener('keydown', startMove)\n  window.addEventListener('keyup', stopMove)\n\n  const player = {\n    render,\n    slowDownBy,\n    speedUpBy,\n    reset,\n    getState: () => state,\n    isPlayer: true\n  }\n\n  return Object.freeze(player)\n}\n\nexport default Player\n","function Text({\n  engine,\n  content = 'example text',\n  x = 10,\n  y = 10,\n  color = 'white',\n  fontStyle = '30px sans-serif',\n  centered = false,\n  background = null\n}) {\n  let properties = {\n    engine,\n    content,\n    x,\n    y,\n    color,\n    fontStyle,\n    centered,\n    background\n  }\n\n  let update = newProperties => {\n    properties = { ...properties, ...newProperties }\n  }\n\n  let draw = () => {\n    const {\n      content,\n      x,\n      y,\n      color,\n      fontStyle,\n      centered,\n      background,\n      engine: {\n        canvas: { ctx, element }\n      }\n    } = properties\n\n    ctx.font = fontStyle\n    ctx.textBaseline = 'hanging'\n\n    const textDimensions = ctx.measureText(content)\n    const centeredWidth = element.width / 2 - textDimensions.width / 2\n\n    if (background !== null) {\n      ctx.fillStyle = background\n      window.textDimensions = textDimensions\n      ctx.fillRect(\n        centered ? centeredWidth - 5 : x - 5,\n        y - 5,\n        textDimensions.width + 10,\n        textDimensions.actualBoundingBoxDescent + 10\n      )\n    }\n\n    ctx.fillStyle = color\n\n    if (centered) {\n      ctx.fillText(content, centeredWidth, y)\n    } else {\n      ctx.fillText(content, x, y)\n    }\n  }\n\n  let render = () => {\n    draw()\n  }\n\n  const text = { update, render }\n\n  return Object.freeze(text)\n}\n\nexport default Text\n","import Text from '../core/Text'\n\nfunction ScoreText({ engine }) {\n  let x = engine.canvas.element.width - 100\n  let y = 10\n\n  let text = Text({\n    engine,\n    content: 'Score: ',\n    fontStyle: '20px sans-serif',\n    x,\n    y\n  })\n\n  const draw = () => {\n    text.update({\n      content: `Score: ${engine.getState().score}`\n    })\n    text.render()\n  }\n\n  const render = () => {\n    draw()\n  }\n\n  const scoreText = { render }\n\n  return Object.freeze(scoreText)\n}\n\nexport default ScoreText\n","import Text from '../core/Text'\n\nfunction StartingText({ engine }) {\n  let canvas = engine.canvas\n\n  let text = Text({\n    engine,\n    content: 'Ready?',\n    fontStyle: '50px lobster',\n    color: 'white',\n    y: canvas.element.height / 2.5,\n    centered: true\n  })\n\n  setTimeout(() => {\n    text.update({ content: 'GO!' })\n    setTimeout(() => {\n      engine.removeObject(startingText)\n    }, 1000)\n  }, 2000)\n\n  const draw = () => {\n    text.render()\n  }\n\n  const render = () => {\n    draw()\n  }\n\n  const startingText = { render }\n\n  return Object.freeze(startingText)\n}\n\nexport default StartingText\n","import Text from '../core/Text'\n\nfunction GameOverText({ engine }) {\n  let canvas = engine.canvas\n\n  let text = Text({\n    engine: engine,\n    content: 'Game Over!',\n    fontStyle: '50px lobster',\n    color: 'white',\n    y: canvas.element.height / 2.5,\n    centered: true\n  })\n\n  let restartText = Text({\n    engine: engine,\n    content: 'Press \"r\" to restart',\n    fontStyle: '25px lobster',\n    color: 'white',\n    y: canvas.element.height / 1.8,\n    centered: true\n  })\n\n  const draw = () => {\n    if (engine.getState().gameIsOver) {\n      text.render()\n      restartText.render()\n    }\n  }\n\n  const render = () => {\n    draw()\n  }\n\n  const gameOverText = { render }\n\n  return Object.freeze(gameOverText)\n}\n\nexport default GameOverText\n","import makeText from '../core/Text'\n\nfunction SpeedText({ engine }) {\n  let x = 30\n  let y = 10\n\n  let text = makeText({\n    engine,\n    content: 'Speed: ',\n    fontStyle: '20px sans-serif',\n    x,\n    y\n  })\n\n  const draw = () => {\n    const speed = Math.floor(engine.getPlayer().getState().speed * 100) / 100\n    text.update({ content: `Speed: ${speed}` })\n    text.render()\n  }\n\n  const render = () => {\n    draw()\n  }\n\n  const scoreText = { render }\n\n  return Object.freeze(scoreText)\n}\n\nexport default SpeedText\n","function Cursor({ engine, source }) {\n  let canvas = engine.canvas\n\n  let x = 0\n  let y = 0\n\n  let image = new Image()\n  image.src = source\n\n  window.addEventListener('mousemove', e => {\n    const { top, left } = canvas.element.getBoundingClientRect()\n    x = e.x - left\n    y = e.y - top\n  })\n\n  function draw() {\n    if (!engine.getState().gameIsOver) return\n    canvas.ctx.drawImage(image, x, y, 30, 30)\n  }\n\n  function render() {\n    draw()\n  }\n\n  const cursor = { render }\n\n  return Object.freeze(cursor)\n}\n\nexport default Cursor\n","import Cursor from '../core/Cursor'\n\nfunction SonicCursor({ engine }) {\n  const cursor = Cursor({ engine, source: '/src/assets/cursor.png' })\n\n  return Object.freeze(cursor)\n}\n\nexport default SonicCursor\n","function BG({ engine, source }) {\n  let canvas = engine.canvas\n  let image = new Image()\n  image.src = source\n\n  let draw = () => {\n    canvas.ctx.drawImage(\n      image,\n      0,\n      0,\n      canvas.element.width,\n      canvas.element.height\n    )\n  }\n\n  let render = () => {\n    draw()\n  }\n\n  const bg = { render }\n\n  return Object.freeze(bg)\n}\n\nexport default BG\n","const { default: BG } = require('../core/BG')\n\nfunction GameBG({ engine }) {\n  const bg = BG({ engine, source: '/src/assets/bg.jpg' })\n\n  return Object.freeze(bg)\n}\n\nexport default GameBG\n","import Sprite from '../core/Sprite'\nimport { randomRange, rectCollision } from '../helpers'\n\nfunction Coin({ engine }) {\n  let canvas = engine.canvas\n\n  let state = {\n    width: 20,\n    height: 20,\n    x: randomRange(50, canvas.element.width - 20),\n    y: randomRange(0, canvas.element.height - 20 - 50)\n  }\n\n  let sprite = Sprite({\n    engine: engine,\n    spritesheet: 'ring',\n    ...state,\n    frameRate: 2,\n    sections: {\n      idle: [\n        {\n          xOffset: 0,\n          yOffset: 0,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 64,\n          yOffset: 0,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 128,\n          yOffset: 0,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 192,\n          yOffset: 0,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 256,\n          yOffset: 0,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 320,\n          yOffset: 0,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 384,\n          yOffset: 0,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 448,\n          yOffset: 0,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 0,\n          yOffset: 64,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 64,\n          yOffset: 64,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 128,\n          yOffset: 64,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 192,\n          yOffset: 64,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 256,\n          yOffset: 64,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 320,\n          yOffset: 64,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 384,\n          yOffset: 64,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 448,\n          yOffset: 64,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 0,\n          yOffset: 128,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 64,\n          yOffset: 128,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 128,\n          yOffset: 128,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 192,\n          yOffset: 128,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 256,\n          yOffset: 128,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 320,\n          yOffset: 128,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 384,\n          yOffset: 128,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 448,\n          yOffset: 128,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 0,\n          yOffset: 192,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 64,\n          yOffset: 192,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 128,\n          yOffset: 192,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 192,\n          yOffset: 192,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 256,\n          yOffset: 192,\n          spriteWidth: 64,\n          spriteHeight: 64\n        },\n        {\n          xOffset: 320,\n          yOffset: 192,\n          spriteWidth: 64,\n          spriteHeight: 64\n        }\n      ]\n    }\n  })\n\n  const collided = () => {\n    const playerState = engine.getPlayer().getState()\n    return rectCollision(state, playerState)\n  }\n\n  const checkIfCollided = () => {\n    if (collided()) {\n      engine.soundBank.play({ sound: 'rings' })\n      engine.removeObject(coin)\n      engine.setState({ score: engine.getState().score + 20 })\n      engine.getPlayer().slowDownBy(0.25)\n    }\n  }\n\n  const draw = () => {\n    sprite.render({ x: state.x, y: state.y })\n  }\n\n  const render = () => {\n    checkIfCollided()\n    draw()\n  }\n\n  const coin = { render }\n\n  return Object.freeze(coin)\n}\n\nexport default Coin\n","import Sprite from '../core/Sprite'\nimport { randomRange, rectCollision, outOfBounds, pickRandom } from '../helpers'\n\nfunction Tails({ engine }) {\n  let canvas = engine.canvas\n  let width = 40\n  let height = 40\n\n  let direction = Math.random() > 0.5 ? 'left' : 'right'\n  let speed = Math.ceil(Math.random() * 7)\n\n  engine.soundBank.play({\n    sound: pickRandom(['tailsHereICome', 'tailsNoSee', 'tailsSonicHappy']),\n    volume: 0.7\n  })\n\n  const state = {\n    width,\n    height,\n    x: direction === 'right' ? -100 : canvas.element.width + 100,\n    y: randomRange(0, canvas.element.height - height - 50),\n    velocity: {\n      x: direction === 'right' ? speed : -speed,\n      y: 0\n    }\n  }\n\n  const sprite = Sprite({\n    engine,\n    initialX: state.x,\n    initialY: state.y,\n    spritesheet: 'tails',\n    width,\n    height,\n    sections: {\n      idle: [\n        {\n          xOffset: 197,\n          yOffset: 120,\n          spriteWidth: 45,\n          spriteHeight: 45\n        },\n        {\n          xOffset: 243,\n          yOffset: 120,\n          spriteWidth: 45,\n          spriteHeight: 45\n        },\n        {\n          xOffset: 288,\n          yOffset: 120,\n          spriteWidth: 45,\n          spriteHeight: 45\n        },\n        {\n          xOffset: 330,\n          yOffset: 120,\n          spriteWidth: 45,\n          spriteHeight: 45\n        }\n      ],\n      idleLeft: [\n        {\n          xOffset: 260,\n          yOffset: 320,\n          spriteWidth: 45,\n          spriteHeight: 45\n        },\n        {\n          xOffset: 214,\n          yOffset: 320,\n          spriteWidth: 45,\n          spriteHeight: 45\n        },\n        {\n          xOffset: 169,\n          yOffset: 320,\n          spriteWidth: 45,\n          spriteHeight: 45\n        },\n        {\n          xOffset: 127,\n          yOffset: 320,\n          spriteWidth: 45,\n          spriteHeight: 45\n        }\n      ]\n    },\n    defaultSection: direction === 'right' ? 'idle' : 'idleLeft',\n    frameRate: 4\n  })\n\n  const collided = () => {\n    const playerState = engine.getPlayer().getState()\n    return rectCollision(state, playerState)\n  }\n\n  const checkIfCollided = () => {\n    if (collided()) {\n      engine.soundBank.play({\n        sound: pickRandom(['tailsSupercharge', 'tailsYeah', 'tailsYeah2'])\n      })\n      engine.getPlayer().speedUpBy(1)\n      engine.removeObject(tails)\n    }\n  }\n\n  const checkIfOutOfBounds = () => {\n    if (outOfBounds(canvas.element, state, 120)) {\n      engine.soundBank.play({\n        sound: pickRandom([\n          'tailsScream',\n          'tailsSorry',\n          'tailsWakeUp',\n          'tailsSonicUpset',\n          'tailsUhOh'\n        ])\n      })\n      engine.removeObject(tails)\n    }\n  }\n\n  const draw = () => {\n    sprite.render({ x: state.x, y: state.y })\n  }\n\n  const applyVelocity = () => {\n    state.x += state.velocity.x\n    state.y += state.velocity.y\n  }\n\n  const render = () => {\n    checkIfCollided()\n    checkIfOutOfBounds()\n    applyVelocity()\n    draw()\n  }\n\n  const tails = { render }\n\n  return Object.freeze(tails)\n}\n\nexport default Tails\n","function Rectangle({ engine, x, y, width, height, color }) {\n  let properties = { engine, x, y, width, height, color }\n\n  let update = newProps => {\n    properties = { ...properties, ...newProps }\n  }\n\n  let draw = () => {\n    let { engine, x, y, width, height, color } = properties\n\n    engine.canvas.ctx.fillStyle = color\n    engine.canvas.ctx.fillRect(x, y, width, height)\n  }\n\n  let render = () => {\n    draw()\n  }\n\n  const rectangle = { render, update }\n\n  return Object.freeze(rectangle)\n}\n\nexport default Rectangle\n","import Rectangle from '../core/Rectangle'\n\nconst TopBar = ({ engine }) =>\n  Rectangle({\n    engine,\n    x: 0,\n    y: 0,\n    width: engine.canvas.element.width,\n    height: 35,\n    color: '#00000090'\n  })\n\nexport default TopBar\n","import Scene from '../core/Scene'\n\nimport Player from '../objects/Player'\nimport ScoreText from '../objects/ScoreText'\nimport StartingText from '../objects/StartingText'\nimport GameOverText from '../objects/GameOverText'\nimport SpeedText from '../objects/SpeedText'\nimport SonicCursor from '../objects/SonicCursor'\nimport GameBG from '../objects/GameBG'\nimport Coin from '../objects/Coin'\nimport Tails from '../objects/Tails'\nimport TopBar from '../objects/TopBar'\n\nconst GameScene = Scene({\n  objects: [\n    GameBG,\n    TopBar,\n    GameOverText,\n    ScoreText,\n    SpeedText,\n    StartingText,\n    Player,\n    SonicCursor\n  ],\n  effects: {\n    startGame: engine => {\n      engine.soundBank.play({ sound: 'bg', loop: true })\n      engine.runEffect('spawnCoin')\n      engine.runEffect('spawnTails')\n    },\n    gameOver: engine => {\n      const { coinHandle, tailsHandle } = engine.getState()\n      engine.setState({ gameIsOver: true })\n      clearInterval(coinHandle)\n      clearInterval(tailsHandle)\n      engine.soundBank.pauseAll()\n      engine.soundBank.play({ sound: 'gameOver' })\n    },\n    spawnCoin: engine => {\n      const coinHandle = setInterval(() => {\n        const coin = Coin({ engine })\n        engine.addObject(coin)\n        setTimeout(() => {\n          if (engine.getObjects().includes(coin) && engine.isRunning()) {\n            engine.runEffect('gameOver')\n          }\n\n          engine.removeObject(coin)\n        }, engine.getState().secondsPerCoin * 1000 - 10)\n      }, engine.getState().secondsPerCoin * 1000)\n\n      engine.setState({ coinHandle })\n    },\n    spawnTails: engine => {\n      const tailsHandle = setTimeout(() => {\n        if (engine.getState().gameIsOver) return\n        const tails = Tails({ engine })\n        engine.addObject(tails)\n        engine.runEffect('spawnTails')\n      }, engine.getState().secondsPerTails * 1000)\n\n      engine.setState({ tailsHandle })\n    },\n    startListeningForPause: engine => {\n      window.addEventListener('keydown', e => {\n        if (e.key !== 'p') return\n        engine.togglePause()\n      })\n    },\n    startListeningForRestart: engine => {\n      window.addEventListener('keydown', e => {\n        if (e.key !== 'r' || !engine.getState().gameIsOver) return\n        engine.setScene('game')\n      })\n    }\n  },\n  state: {\n    coinHandle: null,\n    tailsHandle: null,\n    secondsPerCoin: 3,\n    secondsPerTails: 12,\n    score: 0,\n    gameIsOver: false,\n    paused: false\n  },\n  onEnter: engine => {\n    engine.runEffect('startGame')\n    engine.runEffect('startListeningForPause')\n    engine.runEffect('startListeningForRestart')\n  },\n  onExit: engine => {\n    engine.soundBank.pauseAll()\n  }\n})\n\nexport default GameScene\n","import BG from '../core/BG'\n\nfunction StartScreen({ engine }) {\n  const bg = BG({ engine, source: '/src/assets/start-screen.jpg' })\n\n  return Object.freeze(bg)\n}\n\nexport default StartScreen\n","import Scene from '../core/Scene'\nimport TitleScreen from '../objects/TitleScreen'\n\nconst TitleScene = Scene({\n  objects: [TitleScreen],\n  effects: {\n    startListeningForGameStart: engine => {\n      const listener = e => {\n        if (e.key !== 'Enter') return\n        engine.setScene('game')\n        window.removeEventListener('keydown', listener)\n      }\n\n      window.addEventListener('keydown', listener)\n    }\n  },\n  state: {},\n  onEnter: engine => {\n    engine.runEffect('startListeningForGameStart')\n  }\n})\n\nexport default TitleScene\n","import Canvas from './core/Canvas'\nimport Engine from './core/Engine'\nimport soundBank from './objects/SonicSoundBank'\n\nimport GameScene from './scenes/GameScene'\nimport TitleScene from './scenes/TitleScene'\n\nconst canvas = Canvas({\n  target: document.body,\n  width: 500,\n  height: 400\n})\n\nconst engine = Engine({\n  canvas,\n  soundBank,\n  scenes: {\n    title: TitleScene,\n    game: GameScene\n  },\n  initialScene: 'title'\n})\n\nengine.start()\n"]}